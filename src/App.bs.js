// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as RangeInput from "./RangeInput.bs.js";
import * as AppModuleCss from "./App.module.css";
import * as JsxRuntime from "react/jsx-runtime";

var styles = AppModuleCss;

function App(props) {
  var match = React.useState(function () {
        return "";
      });
  var setText = match[1];
  var match$1 = React.useState(function () {
        return "48";
      });
  var fontSize = match$1[0];
  var match$2 = React.useState(function () {
        return "0.0";
      });
  var letterSpacing = match$2[0];
  var match$3 = React.useState(function () {
        return "400";
      });
  var fontWeight = match$3[0];
  var handleText = function ($$event) {
    $$event.preventDefault();
    var value = $$event.target.value;
    Curry._1(setText, (function (param) {
            return value;
          }));
  };
  var fontSizePx = "" + fontSize + "px";
  var letterSpacingEm = "" + letterSpacing + "em";
  var textAreaStyle = {
    fontSize: fontSizePx,
    fontWeight: fontWeight,
    letterSpacing: letterSpacingEm
  };
  return JsxRuntime.jsx("div", {
              children: JsxRuntime.jsxs("div", {
                    children: [
                      JsxRuntime.jsx("textarea", {
                            className: styles.text,
                            style: textAreaStyle,
                            autoFocus: true,
                            placeholder: "The quick brown fox jumps over the lazy dog.",
                            value: match[0],
                            onChange: handleText
                          }),
                      JsxRuntime.jsxs("div", {
                            children: [
                              JsxRuntime.jsxs("div", {
                                    children: [
                                      JsxRuntime.jsx("div", {
                                            children: "Font size (" + fontSizePx + ")",
                                            className: styles.label
                                          }),
                                      JsxRuntime.jsx(RangeInput.make, {
                                            value: fontSize,
                                            onValue: match$1[1],
                                            min: 8,
                                            max: 256,
                                            step: 1.0
                                          })
                                    ],
                                    className: styles.field
                                  }),
                              JsxRuntime.jsxs("div", {
                                    children: [
                                      JsxRuntime.jsx("div", {
                                            children: "Letter spacing (" + letterSpacingEm + ")",
                                            className: styles.label
                                          }),
                                      JsxRuntime.jsx(RangeInput.make, {
                                            value: letterSpacing,
                                            onValue: match$2[1],
                                            min: 0,
                                            max: 1,
                                            step: 0.01
                                          })
                                    ],
                                    className: styles.field
                                  }),
                              JsxRuntime.jsxs("div", {
                                    children: [
                                      JsxRuntime.jsx("div", {
                                            children: "Font weight (" + fontWeight + ")",
                                            className: styles.label
                                          }),
                                      JsxRuntime.jsx(RangeInput.make, {
                                            value: fontWeight,
                                            onValue: match$3[1],
                                            min: 100,
                                            max: 900,
                                            step: 100.0
                                          })
                                    ],
                                    className: styles.field
                                  })
                            ],
                            className: styles.configuration
                          })
                    ],
                    className: styles.container
                  }),
              className: styles.viewport
            });
}

var make = App;

export {
  styles ,
  make ,
}
/* styles Not a pure module */
